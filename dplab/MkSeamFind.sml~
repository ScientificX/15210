functor MkSeamFind(structure Seq : SEQUENCE) : SEAMFIND =
struct
  structure Seq = Seq
  open Seq

  type pixel = { r : real, g : real, b : real }
  type image = { width : int, height : int, data : pixel seq seq }
  type gradient = real

  (* base case for Int.min operations *)
  val inf = Option.valOf(Int.maxInt)

  fun getMRow G i (j,w) =
      let
        val n = Seq.length G
        val m = Seq.length (Seq.nth G 0)
        val row = Seq.nth G (i-1)
        val left = if (j = 0) then Real.posInf
                   else (Seq.nth row (j-1))
        val center = Seq.nth row j
        val right = if (j = (m-1)) then Real.posInf
                    else (Seq.nth row (j+1))
      in
        w + Real.min(Real.min(left,center),right)
      end

  fun getM G i =
      if (i = (Seq.length G)) then G
      else
        let
          (* G_i = row i of G *)
          val G_i = Seq.nth G i
          val G_i' = (Seq.map (getMRow G i) (Seq.enum G_i))
          val n = Seq.length G
          val G' = Seq.tabulate (fn j => if (i = j) then G_i' else Seq.nth G j) n
        in
          getM G' (i+1)
        end

  fun FS_from_i M i (L as x::xs) =
      if (i = 0)
      then L
      else
        let
          val row = Seq.nth M (i-1)
          val m = Seq.length row
          val left = if (x = 0) then Real.posInf
                     else (Seq.nth row (x-1))
          val center = Seq.nth row x
          val right = if (x = m-1)
                      then Real.posInf
                      else (Seq.nth row (x+1))
          val min = Real.min(Real.min(left,center),right)
          val min_i = if (Real.==(min,left)) then (x-1)
                      else if (Real.==(min,center)) then x
                      else (x+1)
        in
          FS_from_i M (i-1) (min_i::L)
        end


  fun findSeam' (M : real seq seq) =
      let
        val n = Seq.length M
        val m = Seq.length (Seq.nth M 0)
        val last_row = Seq.nth M (n-1)
        val last_row_enumed = Seq.enum last_row
        val indn = #1(Seq.iterate  (fn ((i,x),(j,y)) =>
                                     if (x < y)
                                     then (i,x)
                                     else (j,y))
                                 (~1,Real.posInf) last_row_enumed)
      in
        FS_from_i M (n-1) [indn]
      end

  fun findSeam (G : gradient seq seq) =
      let
        val M = getM G 1
      in
        Seq.fromList(findSeam' M)
      end
end
