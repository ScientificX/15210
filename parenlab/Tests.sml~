structure Tests =
struct

  (* Each test case consists of a weight (for scoring -- ignore this for local
   * testing) and an input string, which will be parsed into a sequence of
   * Paren.L and Paren.R. Correctness is verified against a reference
   * sequential solution given in autograder/MkSequentialPD.sml *)

  val tests = [

    (* some example matched inputs *)
    (1, "()"),
    (1, "(())"),
    (1, "()((())())(())"),

    (* some unmatched inputs -- should return NONE *)val tests = [
(1,"()"),
(1,"()()"),
(1,"(())"),
(1,"()()()"),
(1,"()(())"),
(1,"(())()"),
(1,"(()())"),
(1,"((()))"),
(1,"()()()()"),
(1,"()()(())"),
(1,"()(())()"),
(1,"()(()())"),
(1,"()((()))"),
(1,"(())()()"),
(1,"(())(())"),
(1,"(()())()"),
(1,"(()()())"),
(1,"(()(()))"),
(1,"((()))()"),
(1,"((())())"),
(1,"((()()))"),
(1,"(((())))"),
(1,"()()()()()"),
(1,"()()()(())"),
(1,"()()(())()"),
(1,"()()(()())"),
(1,"()()((()))"),
(1,"()(())()()"),
(1,"()(())(())"),
(1,"()(()())()"),
(1,"()(()()())"),
(1,"()(()(()))"),
(1,"()((()))()"),
(1,"()((())())"),
(1,"()((()()))"),
(1,"()(((())))"),
(1,"(())()()()"),
(1,"(())()(())"),
(1,"(())(())()"),
(1,"(())(()())"),
(1,"(())((()))"),
(1,"(()())()()"),
(1,"(()())(())"),
(1,"(()()())()"),
(1,"(()()()())"),
(1,"(()()(()))"),
(1,"(()(()))()"),
(1,"(()(())())"),
(1,"(()(()()))"),
(1,"(()((())))"),
(1,"((()))()()"),
(1,"((()))(())"),
(1,"((())())()"),
(1,"((())()())"),
(1,"((())(()))"),
(1,"((()()))()"),
(1,"((()())())"),
(1,"((()()()))"),
(1,"((()(())))"),
(1,"(((())))()"),
(1,"(((()))())"),
(1,"(((())()))"),
(1,"(((()())))"),
(1,"((((()))))"),
(1,"()()()()()()"),
(1,"()()()()(())"),
(1,"()()()(())()"),
(1,"()()()(()())"),
(1,"()()()((()))"),
(1,"()()(())()()"),
(1,"()()(())(())"),
(1,"()()(()())()"),
(1,"()()(()()())"),
(1,"()()(()(()))"),
(1,"()()((()))()"),
(1,"()()((())())"),
(1,"()()((()()))"),
(1,"()()(((())))"),
(1,"()(())()()()"),
(1,"()(())()(())"),
(1,"()(())(())()"),
(1,"()(())(()())"),
(1,"()(())((()))"),
(1,"()(()())()()"),
(1,"()(()())(())"),
(1,"()(()()())()"),
(1,"()(()()()())"),
(1,"()(()()(()))"),
(1,"()(()(()))()"),
(1,"()(()(())())"),
(1,"()(()(()()))"),
(1,"()(()((())))"),
(1,"()((()))()()"),
(1,"()((()))(())"),
(1,"()((())())()"),
(1,"()((())()())"),
(1,"()((())(()))"),
(1,"()((()()))()"),
(1,"()((()())())"),
(1,"()((()()()))"),
(1,"()((()(())))"),
(1,"()(((())))()"),
(1,"()(((()))())"),
(1,"()(((())()))"),
(1,"()(((()())))"),
(1,"()((((()))))"),
(1,"(())()()()()"),
(1,"(())()()(())"),
(1,"(())()(())()"),
(1,"(())()(()())"),
(1,"(())()((()))"),
(1,"(())(())()()"),
(1,"(())(())(())"),
(1,"(())(()())()"),
(1,"(())(()()())"),
(1,"(())(()(()))"),
(1,"(())((()))()"),
(1,"(())((())())"),
(1,"(())((()()))"),
(1,"(())(((())))"),
(1,"(()())()()()"),
(1,"(()())()(())"),
(1,"(()())(())()"),
(1,"(()())(()())"),
(1,"(()())((()))"),
(1,"(()()())()()"),
(1,"(()()())(())"),
(1,"(()()()())()"),
(1,"(()()()()())"),
(1,"(()()()(()))"),
(1,"(()()(()))()"),
(1,"(()()(())())"),
(1,"(()()(()()))"),
(1,"(()()((())))"),
(1,"(()(()))()()"),
(1,"(()(()))(())"),
(1,"(()(())())()"),
(1,"(()(())()())"),
(1,"(()(())(()))"),
(1,"(()(()()))()"),
(1,"(()(()())())"),
(1,"(()(()()()))"),
(1,"(()(()(())))"),
(1,"(()((())))()"),
(1,"(()((()))())"),
(1,"(()((())()))"),
(1,"(()((()())))"),
(1,"(()(((()))))"),
(1,"((()))()()()"),
(1,"((()))()(())"),
(1,"((()))(())()"),
(1,"((()))(()())"),
(1,"((()))((()))"),
(1,"((())())()()"),
(1,"((())())(())"),
(1,"((())()())()"),
(1,"((())()()())"),
(1,"((())()(()))"),
(1,"((())(()))()"),
(1,"((())(())())"),
(1,"((())(()()))"),
(1,"((())((())))"),
(1,"((()()))()()"),
(1,"((()()))(())"),
(1,"((()())())()"),
(1,"((()())()())"),
(1,"((()())(()))"),
(1,"((()()()))()"),
(1,"((()()())())"),
(1,"((()()()()))"),
(1,"((()()(())))"),
(1,"((()(())))()"),
(1,"((()(()))())"),
(1,"((()(())()))"),
(1,"((()(()())))"),
(1,"((()((()))))"),
(1,"(((())))()()"),
(1,"(((())))(())"),
(1,"(((()))())()"),
(1,"(((()))()())"),
(1,"(((()))(()))"),
(1,"(((())()))()"),
(1,"(((())())())"),
(1,"(((())()()))"),
(1,"(((())(())))"),
(1,"(((()())))()"),
(1,"(((()()))())"),
(1,"(((()())()))"),
(1,"(((()()())))"),
(1,"(((()(()))))"),
(1,"((((()))))()"),
(1,"((((())))())"),
(1,"((((()))()))"),
(1,"((((())())))"),
(1,"((((()()))))"),
(1,"(((((())))))")
  ]
    (1, "((()"),
    (1, "()()(()()()"),
    (1, "())")

  ]

end
