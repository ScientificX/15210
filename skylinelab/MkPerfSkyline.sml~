functor MkPerfSkyline (structure Seq : SEQUENCE)
  :> PERF_SKYLINE where type 'a seq = 'a Seq.t
                  where type skyline = (int * int) Seq.t =
struct
  type 'a seq = 'a Seq.t
  type skyline = (int * int) Seq.t

  exception NotYetImplemented

  datatype align = L | R

  exception NotYetImplemented

  fun singleton (l, h, r) =
    let
      fun tab_fun 0 = (l,h)
         |tab_fun _ = (r,0)
    in
      Seq.tabulate tab_fun 2
    end

  fun combine (sky1, sky2) =
      let
        fun optsL (x,y) = (x,y,L,SOME y)
        fun nonesL (x,y) = (x,y,L,NONE)
        fun optsR (x,y) = (x,y,R,SOME y)
        fun nonesR (x,y) = (x,y,R,NONE)
        val sky1optsL = Seq.map optsL sky1
        val sky1optsR = Seq.map nonesL sky1
        val sky2optsL = Seq.map nonesR sky2
        val sky2optsR = Seq.map optsR sky2
        fun comp ((x1,_,_,_),(x2,_,_,_)) = Int.compare(x1,x2)
        val optsL = Seq.merge comp (sky1optsL,sky2optsL)
        val optsR = Seq.merge comp (sky1optsR,sky2optsR)
        fun copyL ((x1,y1,side1,opt1),(x2,y2,side2,opt2)) =
            case (opt2) of
                SOME _ => (x2,y2,side2,opt2)
               |NONE => (x2,y2,side2,opt1)
        fun copyR ((x1,y1,side1,opt1),(x2,y2,side2,opt2)) =
            case (opt2) of
                NONE => (x2,y2,side2,opt1)
               |SOME _ => (x2,y2,side2,opt2)
        val optsL = Seq.scanIncl copyL (0,0,R,NONE) optsL
        val optsR = Seq.scanIncl copyR (0,0,L,NONE) optsR
        fun zip ((x1,y1,side1,opt1),(x2,y2,side2,opt2)) =
            (x1,y1,side1,opt1,opt2)
        val combined = Seq.zipWith zip (optsL,optsR)
        fun cartesian (x,y,side,lopt,ropt) =
            case (lopt,ropt) of
                (SOME a, SOME b) => (x,Int.max(a,b))
               |(SOME a, NONE) => (x,Int.max(a,y))
               |(NONE, SOME a) => (x,Int.max(a,y))
               |(_,_) => (x,y)
        val unfiltered = Seq.map cartesian combined
        val l = Seq.length unfiltered
        fun rm_duplicates (i,(x,y)) =
            if ((i = 0) orelse (i = l - 1)) then
              true
            else if ((i = (l - 2)) andalso (y = 0)) then
              false
            else
              let
                val (_,y') = Seq.nth unfiltered (i - 1)
              in
                y <> y'
              end
      in
        Seq.filterIdx rm_duplicates unfiltered
      end

  fun skyline (g : int) (bs : (int * int * int) Seq.t) : skyline =
      case Seq.splitMid bs of
          Seq.EMPTY => Seq.empty()
         |Seq.ONE x => singleton x
         |Seq.PAIR (L,R) =>
          let
            val size = Int.max(Seq.length L, Seq.length R)
          in
            if (size > g)
            then combine (Primitives.par (fn () => skyline g L,
                                          fn () => skyline g R))
            else
              Seq.reduce combine (Seq.empty()) (Seq.map singleton bs)
          end

end
