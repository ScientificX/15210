functor MkBignumMul
  (structure Seq : SEQUENCE
   structure Bignum : BIGNUM where type t = Bit.t Seq.t
   val ++ : Bignum.t * Bignum.t -> Bignum.t
   val -- : Bignum.t * Bignum.t -> Bignum.t) :>
sig
  val ** : Bignum.t * Bignum.t -> Bignum.t
end =
struct

  infix 6 ++ --
  infix 7 **

  exception NotYetImplemented

  fun isZero (x) = (Seq.length x = 0)

  fun isOne (x) = (Seq.length x = 1)

  fun padZeros (l : int) (x : Bit.t Seq.t) : Bit.t Seq.t =
      let
        val l_0 = Seq.length x
        val app = l - l_0
      in
        if (app > 0)
        then Seq.append (x,(Seq.tabulate (fn i => Bit.ZERO) app))
        else x
      end

  fun leftShift (s : int) (x : Bit.t Seq.t) : Bit.t Seq.t =
      let
        val s = Seq.tabulate (fn i => Bit.ZERO) s
      in
        Seq.append (s,x)
      end

  fun x ** y =
      if ((isZero x) orelse (isZero y)) then Seq.empty()
      else if (isOne x) then y
      else if (isOne y) then x
      else
        let
          val l = Int.max(Seq.length x, Seq.length y)
          val x' = padZeros l x
          val y' = padZeros l y
          val halfOne = l div 2 (* floor of n/2 *)
          val halfTwo = l - halfOne
          val q = Bignum.trim(Seq.subseq x' (0,halfOne))
          val s = Bignum.trim(Seq.subseq y' (0,halfOne))
          val p = Bignum.trim(Seq.subseq x' (halfOne,halfTwo))
          val r = Bignum.trim(Seq.subseq y' (halfOne,halfTwo))
          val (p1,p2,p3) =
              Primitives.par3 ((fn () => p**r),
                               (fn () => (p++q)**(r++s)),
                               (fn () => q**s))
        in
          Bignum.trim((leftShift (2*halfOne) p1)++
                      (leftShift halfOne ((p2--p1)--p3))++p3)
        end

end
